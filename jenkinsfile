def DOCKER_IMAGE_NAME = "tlgj255/base-image"           // 생성하는 Docker image 이름
def DOCKER_IMAGE_TAGS = "grammar-checker"  // 생성하는 Docker image 태그
def NAMESPACE = "grammar-checker"
def VERSION = "${env.BUILD_NUMBER}"
def DATE = new Date();
  
podTemplate(label: 'builder',
            containers: [                
                containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true),
                containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.15.3', command: 'cat', ttyEnabled: true)
            ],
            volumes: [
                hostPathVolume(mountPath: '/home/gradle/.gradle', hostPath: '/home/admin/k8s/jenkins/.gradle'),
                hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock')
            ]) {
    node {
        stage('Checkout') {
            checkout scm   
        }
        stage('Unit & Integration Tests') { 
            sh "chmod +x gradlew"
            sh "./gradlew clean test --no-daemon"
        }
        stage('Docker build') {
            container('docker') {
                sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAGS} ."
                sh "docker push ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAGS}"
            }
        }

      stage('Run kubectl') {
          container('kubectl') {
                      sh "kubectl get ns ${NAMESPACE}|| kubectl create ns ${NAMESPACE}"

                      /* k8s-deployment.yaml 의 env값을 수정해준다(DATE로). 배포시 수정을 해주지 않으면 변경된 내용이 정상 배포되지 않는다. */
                      /*sh "echo ${VERSION}"
                      sh "sed -i.bak 's#VERSION_STRING#${VERSION}#' ./k8s/k8s-deployment.yaml"*/
                      sh "echo ${DATE}"
                      sh "sed -i.bak 's#DATE_STRING#${DATE}#' ./k8s/k8s-deployment.yaml"

                      /* yaml파일로 배포를 수행한다 */
                      sh "kubectl apply -f ./k8s/k8s-deployment.yaml -n ${NAMESPACE}"
                      sh "kubectl apply -f ./k8s/k8s-service.yaml -n ${NAMESPACE}"
          }
      }

  }
}